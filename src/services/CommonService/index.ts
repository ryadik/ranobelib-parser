import type {Config, Prompt} from "prompt-sync";
import type {CommonServiceModel} from "../../models/common-service.model";

export class CommonService implements CommonServiceModel {
    private readonly $promtSync: (config?: Config) => Prompt;

    constructor($promtSync: (config?: Config) => Prompt) {
        this.$promtSync = $promtSync;
    }

    public userAlert(): void {
        console.log('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ —Å —Å–∞–π—Ç–∞ ranobelib.me')
        console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏–∂–µ.')
        console.log('\n–í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —É –í–∞—Å, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞.')
        console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å.')
        console.log('–í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–±–æ—è–º.')
    }

    public getBookURL(): string {
        const prompt = this.$promtSync({ sigint: true });

        console.log("\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –∫–Ω–∏–≥–∏ —Å —Å–∞–π—Ç–∞ ranobelib.me");
        console.log("–ü—Ä–∏–º–µ—Ä –∞–¥—Ä–µ—Å–∞: https://ranobelib.me/sakurasou-no-pet-na-kanojo-novel")
        console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–±–æ—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.')

        const URL: string = prompt({});

        console.log(`\n–°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏, –ø–æ –∞–¥—Ä–µ—Å—É: ${URL}`)

        return URL;
    }

    public delay(time: number): Promise<void> {
        return new Promise(function(resolve) {
            setTimeout(resolve, time)
        });
    }

    public selectVolumesToDownload(chaptersData: any[]): any[] {
        const prompt = this.$promtSync({ sigint: true });
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –ø–æ —Ç–æ–º–∞–º
        const volumeMap = new Map<number, number>();
        chaptersData.forEach(chapter => {
            const volumeMatch = chapter.title.match(/–¢–æ–º (\d+)/);
            if (volumeMatch) {
                const volume = parseInt(volumeMatch[1]);
                volumeMap.set(volume, (volumeMap.get(volume) || 0) + 1);
            }
        });
        
        const volumes = Array.from(volumeMap.keys()).sort((a, b) => a - b);
        
        console.log('\nüìö –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–º–∞:');
        volumes.forEach(vol => {
            const chapterCount = volumeMap.get(vol) || 0;
            console.log(`   –¢–æ–º ${vol}: ${chapterCount} –≥–ª–∞–≤`);
        });
        
        console.log(`\nüìä –í—Å–µ–≥–æ: ${volumes.length} —Ç–æ–º–æ–≤, ${chaptersData.length} –≥–ª–∞–≤`);
        console.log('\n‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≥–ª–∞–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!');
        
        console.log('\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å:');
        console.log('1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ–º–∞');
        console.log('2. –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–º–∞');
        console.log('3. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–æ–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3)');
        console.log('4. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –≥–ª–∞–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
        
        const choice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-4): ');
        
        let selectedVolumes: number[] = [];
        
        switch (choice) {
            case '1':
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–æ–º–∞');
                selectedVolumes = volumes;
                break;
                
            case '2':
                const volumesInput = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–æ—Å—Ç—É–ø–Ω–æ: ${volumes.join(', ')}): `);
                if (volumesInput) {
                    const inputVolumes = volumesInput.split(',').map(v => parseInt(v.trim())).filter(v => !isNaN(v) && volumes.includes(v));
                    if (inputVolumes.length > 0) {
                        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω—ã —Ç–æ–º–∞: ${inputVolumes.join(', ')}`);
                        selectedVolumes = inputVolumes;
                        break;
                    }
                }
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–º 1');
                selectedVolumes = [1];
                break;
                
            case '3':
                const rangeInput = prompt('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–æ–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3): ');
                if (rangeInput && rangeInput.includes('-')) {
                    const [start, end] = rangeInput.split('-').map(v => parseInt(v.trim()));
                    if (!isNaN(start) && !isNaN(end) && start <= end) {
                        const rangeVolumes = [];
                        for (let i = start; i <= end; i++) {
                            if (volumes.includes(i)) {
                                rangeVolumes.push(i);
                            }
                        }
                        if (rangeVolumes.length > 0) {
                            console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: —Ç–æ–º–∞ ${rangeVolumes.join(', ')}`);
                            selectedVolumes = rangeVolumes;
                            break;
                        }
                    }
                }
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–º 1');
                selectedVolumes = [1];
                break;
                
            case '4':
                const maxChaptersInput = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –≥–ª–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ');
                const maxChapters = parseInt(maxChaptersInput || '5');
                if (!isNaN(maxChapters) && maxChapters > 0) {
                    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ: –ø–µ—Ä–≤—ã–µ ${maxChapters} –≥–ª–∞–≤`);
                    
                    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    console.log('\nüñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
                    console.log('1. üì∑ –í–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–∞—Å–∏–≤–µ–µ, –Ω–æ —Ä–∏—Å–∫ –æ—à–∏–±–æ–∫ ECONNRESET)');
                    console.log('2. üö´ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ, –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)');
                    
                    const imageChoice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-2): ');
                    
                    if (imageChoice === '2') {
                        console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                        return ['NO_IMAGES', -1, maxChapters];
                    } else {
                        console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
                        return [-1, maxChapters]; // -1 –æ–∑–Ω–∞—á–∞–µ—Ç "–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–ª–∞–≤"
                    }
                }
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥–ª–∞–≤');
                
                // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è fallback
                console.log('\nüñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
                console.log('1. üì∑ –í–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                console.log('2. üö´ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                
                const fallbackImageChoice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-2): ');
                
                if (fallbackImageChoice === '2') {
                    return ['NO_IMAGES', -1, 5];
                } else {
                    return [-1, 5];
                }
                
            default:
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–º 1');
                selectedVolumes = [1];
                break;
        }
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–º–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (selectedVolumes.length > 1) {
            console.log('\nüîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
            console.log('1. üìö –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –≤ –æ–¥–∏–Ω EPUB (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ —Ä–∏—Å–∫ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å—ë –ø—Ä–∏ –æ—à–∏–±–∫–µ)');
            console.log('2. üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–º–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ (–ë–ï–ó–û–ü–ê–°–ù–û! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
            
            const modeChoice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-2): ');
            
            if (modeChoice === '2') {
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–æ–º–∞–º');
                console.log('üí° –ö–∞–∂–¥—ã–π —Ç–æ–º –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π EPUB —Ñ–∞–π–ª');
                console.log('üõ°Ô∏è –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Ç–æ–º, –∞ –Ω–µ –≤—Å—ë');
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                console.log('\nüñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
                console.log('1. üì∑ –í–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–∞—Å–∏–≤–µ–µ, –Ω–æ —Ä–∏—Å–∫ –æ—à–∏–±–æ–∫ ECONNRESET)');
                console.log('2. üö´ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ, –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)');
                
                const imageChoice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-2): ');
                
                if (imageChoice === '2') {
                    console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                    console.log('üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å!');
                    return ['VOLUME_BY_VOLUME', 'NO_IMAGES', ...selectedVolumes];
                } else {
                    console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
                    console.log('‚ö†Ô∏è –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç fallback –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                    return ['VOLUME_BY_VOLUME', ...selectedVolumes];
                }
            } else {
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–æ–¥–∏–Ω —Ñ–∞–π–ª)');
                console.log('‚ö†Ô∏è –ü—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å!');
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                console.log('\nüñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
                console.log('1. üì∑ –í–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–∞—Å–∏–≤–µ–µ, –Ω–æ —Ä–∏—Å–∫ –æ—à–∏–±–æ–∫ ECONNRESET)');
                console.log('2. üö´ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ, –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)');
                
                const imageChoice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-2): ');
                
                if (imageChoice === '2') {
                    console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                    return ['NO_IMAGES', ...selectedVolumes];
                } else {
                    console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
                    return selectedVolumes;
                }
            }
        } else {
            // –î–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–º–∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            console.log('\nüñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
            console.log('1. üì∑ –í–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–∞—Å–∏–≤–µ–µ, –Ω–æ —Ä–∏—Å–∫ –æ—à–∏–±–æ–∫ ECONNRESET)');
            console.log('2. üö´ –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ, –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä)');
            
            const imageChoice = prompt('–í–∞—à –≤—ã–±–æ—Ä (1-2): ');
            
            if (imageChoice === '2') {
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
                return ['NO_IMAGES', ...selectedVolumes];
            } else {
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
                return selectedVolumes;
            }
        }
        
        return selectedVolumes;
    }
}